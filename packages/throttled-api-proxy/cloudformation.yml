AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  TLD:
    Type: String
    Description: TLD name needed by Route53 to perform DNS (example.com)
    Default: ''
  Domain:
    Type: String
    Description: Domain name for your api (api.example.com)
    Default: ''
  Path:
    Type: String
    Description: The path part of your api (api.example.com/path)
    Default: 'api'
  Stage:
    Type: String
    Description: The deployment stage used by API Gateway
    Default: 'dev'

Conditions:
  UseCustomDomain: !And
    - !Not [!Equals [!Ref TLD, '']]
    - !Not [!Equals [!Ref Domain, '']]

Resources:
  SessionCacheSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Lock cache down to webserver access only"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 6379
          ToPort: 6379
          CidrIp: 0.0.0.0/0

  SessionCache:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      PreferredCacheClusterAZs:
      - us-east-1a
      AutomaticFailoverEnabled: false
      AutoMinorVersionUpgrade: true
      CacheNodeType: 'cache.t2.micro'
      Engine: 'redis'
      EngineVersion: '3.2.6'
      NumCacheClusters: 1
      AtRestEncryptionEnabled: true
      TransitEncryptionEnabled: false
      ReplicationGroupDescription: 'Session Cache redis cluster'
      SecurityGroupIds:
        - Fn::GetAtt:
          - SessionCacheSecurityGroup
          - GroupId
  
  #
  # Role that our API Gateway will assume to write logs
  #
  ApiGatewayExecuteAuthorizerRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - "apigateway.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Path: "/"

  #
  # Create a Policy and attach it to ApiGatewayCloudWatchRole
  #
  IamPolicyExecuteAuthorizer:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: IamPolicyExecuteAuthorizer
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - lambda:InvokeFunction
          Resource: '*'
      Roles:
      - Ref: ApiGatewayExecuteAuthorizerRole

  #
  # Role that our API Gateway will assume to write logs
  #
  ApiGatewayCloudWatchRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - "apigateway.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

  #
  # Create a Policy and attach it to ApiGatewayCloudWatchRole
  #
  IamPolicyPushToCloudWatch:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: IamPolicyPushToCloudWatch
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:DescribeLogGroups
          - logs:DescribeLogStreams
          - logs:PutLogEvents
          - logs:GetLogEvents
          - logs:FilterLogEvents
          Resource: '*'
      Roles:
      - Ref: ApiGatewayCloudWatchRole


  #
  # Role that our Lambda will assume to provide access to other AWS resources
  #
  IamRoleLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: '/'

  #
  # Create a Policy and attach it to our Lambda Role.
  # Note: 'ec2:*' is required for VpcConfig
  #
  IamPolicyLambdaExecution:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: IamPolicyLambdaExecution
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - ec2:CreateNetworkInterface
          - ec2:DescribeNetworkInterfaces
          - ec2:DeleteNetworkInterface
          Resource: arn:aws:logs:us-east-1:*:*
        - Effect: Allow
          Action:
          - 'elasticache:*'
          Resource: '*'
      Roles:
      - Ref: IamRoleLambdaExecution

  #
  # Our Lambda function.  Basic code has been added.  You will replace the code later via your Github repo.
  #
  AuthorizerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Timeout: 5
      VpcConfig:
        SecurityGroupIds:
          - String
        SubnetIds:
          - String
      Role:
        Fn::GetAtt:
          - IamRoleLambdaExecution
          - Arn
      Code:
        ZipFile: !Sub |
          'use strict';

          exports.handler = function(event, context, callback) {
              const response = {
                  statusCode: 200,
                  body: JSON.stringify({
                      message: `Hello CIM`,
                      event: event
                  })
              };

              callback(null, response);
          };
      Runtime: nodejs6.10
      Environment:
        Variables:
          SessionCacheHost: !GetAtt SessionCache.PrimaryEndPoint.Address

  #
  # Create the API Gateway
  #
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ApiGatewayRestApi
      ApiKeySourceType: AUTHORIZER
      Description: "Throttling AWS demo 'Pets Store' using Authorizer"

  Authorizer:
    Type: "AWS::ApiGateway::Authorizer"
    Properties:
      AuthorizerCredentials:
        Fn::GetAtt:
          - "ApiGatewayExecuteAuthorizerRole"
          - "Arn"
      AuthorizerResultTtlInSeconds: "300"
      AuthorizerUri:
        Fn::Join:
          - ""
          -
            - "arn:aws:apigateway:"
            - Ref: "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - Fn::GetAtt:
                - "AuthorizerLambdaFunction"
                - "Arn"
            - "/invocations"
      Type: "TOKEN"
      IdentitySource: "method.request.header.X-Samanage-Authorization"
      Name: "DefaultAuthorizer"
      RestApiId:
        Ref: "RestApi"


  ApiGatewayAccount:
    Type: "AWS::ApiGateway::Account"
    Properties:
     CloudWatchRoleArn:
      "Fn::GetAtt":
       - ApiGatewayCloudWatchRole
       - Arn

  RestApiProdStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      StageName: prod
      Description: Production API
      RestApiId: !Ref RestApi
      DeploymentId: !Ref ApiGatewayDeployment
      Variables:
        StackName: !Sub '${AWS::StackName}'
        StageName: prod
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          MetricsEnabled: 'true'
          DataTraceEnabled: 'true'
          ThrottlingBurstLimit: 999
          ThrottlingRateLimit: 2
          LoggingLevel: ERROR

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApi.RootResourceId
      #PathPart: !Ref Path #ex. example.com/api.
      PathPart: '{proxy+}'
      RestApiId: !Ref RestApi

  ApiGatewayMethodOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref RestApi
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Credentials: "'false'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Credentials: true

  ApiGatewayProxyAny:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref RestApi
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref Authorizer
      ApiKeyRequired: false
      RequestParameters:
          method.request.path.proxy: true
      MethodResponses:
        - StatusCode: 200
      Integration:
        IntegrationHttpMethod: GET
        Type: HTTP_PROXY
        #Uri: 'https://87wzh3anoa.execute-api.us-east-1.amazonaws.com/dev/{proxy}' # aws pet store
        Uri: 'https://api.samanage.com/{proxy}'
        IntegrationResponses:
          - StatusCode: 200
        RequestParameters:
          integration.request.path.proxy: method.request.path.proxy
        PassthroughBehavior: WHEN_NO_MATCH

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RestApi
      StageName: unused
      StageDescription:
        Description: "unused: due to a bug in aws api cloudformation we need to create extra stage"
        MetricsEnabled: 'true' #this affects the prod stage
        DataTraceEnabled: 'true' #this affects the prod stage
    DependsOn:
      - ApiGatewayProxyAny
      - ApiGatewayMethodOptions

  #
  # We need to give API Gateway permission to invoke our Lambda function.
  #
  DefaultUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
      - ApiId: !Ref RestApi
        Stage: !Ref RestApiProdStage
      Description: Customer ABC's usage plan
      Quota:
        Limit: 50000
        Period: MONTH
      Throttle:
        BurstLimit: 200
        RateLimit: 10
      UsagePlanName: DefaultUsagePlan

  #
  # We need to give API Gateway permission to invoke our Lambda function.
  #
  PermissionForAPIGatewayToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Ref AuthorizerLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ''
          - - 'arn:aws:execute-api:'
            - Ref: AWS::Region
            - ':'
            - Ref: AWS::AccountId
            - ':'
            - Ref: RestApi
            - '/*/*'

  #
  # SSL Certificate needed by CloudFront.
  #
  SSL:
    Type: AWS::CertificateManager::Certificate
    Condition: UseCustomDomain
    Properties:
      DomainName: !Ref Domain
      DomainValidationOptions:
        - DomainName: !Ref Domain
          ValidationDomain: !Ref TLD

  #
  # Custom Domain Name
  #
  ApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Condition: UseCustomDomain
    Properties:
      DomainName: !Ref Domain
      CertificateArn: !Ref SSL

  #
  # Wire custom domain to Api Gateway
  #
  BasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Condition: UseCustomDomain
    Properties:
      DomainName: !Ref ApiDomainName
      RestApiId: !Ref RestApi
      Stage: !Ref Stage

  #
  # Route53 DNS record set to map our domain to API Gateway
  #
  DomainDNS:
    Type: AWS::Route53::RecordSetGroup
    Condition: UseCustomDomain
    Properties:
      HostedZoneName:
        Fn::Join:
          - ''
          - - !Ref TLD
            - '.'
      RecordSets:
        -
          Name: !Ref Domain
          Type: 'A'
          AliasTarget:
            HostedZoneId: 'Z2FDTNDATAQYW2' # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html#cfn-route53-aliastarget-hostedzoneid
            DNSName: !GetAtt ApiDomainName.DistributionDomainName

Outputs:
  AuthorizerLambdaFunction:
    Description: Lambda Function
    Value: !Ref AuthorizerLambdaFunction
    Export:
      Name: !Sub '${AWS::StackName}-AuthorizerLambdaFunction'
  ApiGatewayUrl:
    Description: URL of your API endpoint
    Value: !Join
      - ''
      - - 'https://'
        - !Ref RestApi
        - '.execute-api.'
        - !Ref AWS::Region
        - '.amazonaws.com/'
        - !Ref Stage
        - '/'
        - !Ref Path
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayUrl'
  CustomDomainUrl:
    Description: URL of your API endpoint
    Condition: UseCustomDomain
    Value: !Join
      - ''
      - - 'https://'
        - !Ref Domain
        - '/'
        - !Ref Path
  ApiGatewayArn:
    Description: ApiGateway ARN
    Value: !Ref RestApi
    #  Fn::GetAtt:
    #    - RestApi
    #    - Id
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayId'
  SessionCachePrimaryAddress:
    Description: 'The DNS address of the primary read-write cache node.'
    Value: !GetAtt SessionCache.PrimaryEndPoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-SessionCachePrimaryAddress'
  SessionCachePrimaryPort:
    Description: 'The number of the port that the primary read-write cache engine is listening on.'
    Value: !GetAtt SessionCache.PrimaryEndPoint.Port
    Export:
      Name: !Sub '${AWS::StackName}-SessionCachePrimaryPort'
  SessionCacheSecondaryAddresses:
    Description: 'A string with a list of endpoints for the read-only replicas.'
    Value: !GetAtt SessionCache.ReadEndPoint.Addresses
    Export:
      Name: !Sub '${AWS::StackName}-SessionCacheSecondaryAddresses'
  SessionCacheSecondaryPorts:
    Description: 'A string with a list of ports for the read-only replicas. '
    Value: !GetAtt SessionCache.ReadEndPoint.Ports
    Export:
      Name: !Sub '${AWS::StackName}-SessionCacheSecondaryPorts'


